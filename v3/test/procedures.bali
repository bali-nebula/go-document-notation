{
    if true do {
        ! This is a note.
    }
    while ok do {
        accept messages[index]

        !>
            COMMENTED OUT...
            if index > maximum do {
                break loop
            }
        <!
        continue loop
    }

    !>
        This is a comment.
    <!
    with each $index in [1..5] do {
        let array[index] += index
    }

    !>
        This is a comment...
        
        with an empty line.
    <!
    if flip() do {
        checkout $draft from <bali:/nebula/tests/Procedures:v1.2>
    }
    checkout $draft at level 3 from <bali:/nebula/tests/Procedures:v1.2>
    checkout $draft from <bali:/nebula/tests/Procedures:v1.2>
    save draft as $citation
    discard draft
    notarize document as <bali:/nebula/test/Contract:v1>
    select foo matching any do {
        return foo
    }
    select attribute[$first 3] matching 0 do {
        let attribute[$first 3] := 5
    } matching ~π do {
        let attribute[$first 3] += ∞
    } matching ~π do {
        let attribute[$first 3] -= 50%
    } matching ~π do {
        let attribute[$first 3] *= p0.5
    } matching ~π do {
        let attribute[$first 3] /= p1
    } matching none do {
        let attribute[$first 3] ?= undefined
    }
    do list<-addValue(value)

    ! Check for empty list.
    if list<-isEmpty() and not (value = none) do {
        do list<-addValue(value)
    }
    if not successful do {
        throw [
            $type: $bad
            $kind: "worse"
        ]
    }
    if foo do {
        if bar do {
            do foobar()
        }
    } on $failure matching $bad do {
    } matching $worse do {
    } matching $worst do {
    }
    post messages[last] to bag
    publish [
        $type: $messagePosted
        $messageId: #0123456789ABC
    ]
    reject message
    retrieve $message from bag on $error matching any do {
        return error
    }
}
